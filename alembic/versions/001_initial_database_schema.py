"""Initial database schema

Revision ID: 001
Revises: 
Create Date: 2024-12-14 10:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create users table
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    
    # Create user_sessions table
    op.create_table('user_sessions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('session_token', sa.String(length=500), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_activity', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_token')
    )
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    
    # Create clients table
    op.create_table('clients',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('whatsapp_phone', sa.String(length=20), nullable=True),
    sa.Column('document_number', sa.String(length=20), nullable=True),
    sa.Column('document_type', sa.String(length=10), nullable=True),
    sa.Column('birth_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('gender', sa.String(length=10), nullable=True),
    sa.Column('marital_status', sa.String(length=20), nullable=True),
    sa.Column('profession', sa.String(length=100), nullable=True),
    sa.Column('address_street', sa.String(length=255), nullable=True),
    sa.Column('address_number', sa.String(length=20), nullable=True),
    sa.Column('address_complement', sa.String(length=100), nullable=True),
    sa.Column('address_neighborhood', sa.String(length=100), nullable=True),
    sa.Column('address_city', sa.String(length=100), nullable=True),
    sa.Column('address_state', sa.String(length=2), nullable=True),
    sa.Column('address_zipcode', sa.String(length=10), nullable=True),
    sa.Column('address_country', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('client_type', sa.String(length=20), nullable=False),
    sa.Column('preferred_contact', sa.String(length=20), nullable=False),
    sa.Column('preferred_language', sa.String(length=10), nullable=False),
    sa.Column('practice_areas_interest', sa.JSON(), nullable=True),
    sa.Column('consultation_preference', sa.String(length=20), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('custom_fields', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_clients_document_number'), 'clients', ['document_number'], unique=False)
    op.create_index(op.f('ix_clients_email'), 'clients', ['email'], unique=False)
    op.create_index(op.f('ix_clients_full_name'), 'clients', ['full_name'], unique=False)
    op.create_index(op.f('ix_clients_phone'), 'clients', ['phone'], unique=False)
    op.create_index(op.f('ix_clients_whatsapp_phone'), 'clients', ['whatsapp_phone'], unique=False)
    
    # Create client_contacts table
    op.create_table('client_contacts',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('contact_type', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('relationship', sa.String(length=50), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_client_contacts_client_id'), 'client_contacts', ['client_id'], unique=False)
    
    # Create legal_cases table
    op.create_table('legal_cases',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('case_number', sa.String(length=50), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('assigned_lawyer_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('practice_area', sa.String(length=100), nullable=False),
    sa.Column('case_type', sa.String(length=50), nullable=False),
    sa.Column('priority', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=30), nullable=False),
    sa.Column('estimated_value', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('hourly_rate', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('fixed_fee', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('billing_type', sa.String(length=20), nullable=False),
    sa.Column('consultation_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('court_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('closed_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('court_name', sa.String(length=255), nullable=True),
    sa.Column('judge_name', sa.String(length=255), nullable=True),
    sa.Column('case_number_court', sa.String(length=100), nullable=True),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('custom_fields', sa.JSON(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('case_number')
    )
    op.create_index(op.f('ix_legal_cases_assigned_lawyer_id'), 'legal_cases', ['assigned_lawyer_id'], unique=False)
    op.create_index(op.f('ix_legal_cases_case_number'), 'legal_cases', ['case_number'], unique=False)
    op.create_index(op.f('ix_legal_cases_client_id'), 'legal_cases', ['client_id'], unique=False)
    op.create_index(op.f('ix_legal_cases_practice_area'), 'legal_cases', ['practice_area'], unique=False)
    op.create_index(op.f('ix_legal_cases_title'), 'legal_cases', ['title'], unique=False)
    
    # Create appointments table
    op.create_table('appointments',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('legal_case_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('assigned_to', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('appointment_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('scheduled_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('meeting_type', sa.String(length=20), nullable=False),
    sa.Column('meeting_url', sa.String(length=500), nullable=True),
    sa.Column('reminder_sent', sa.Boolean(), nullable=False),
    sa.Column('reminder_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_by', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['legal_case_id'], ['legal_cases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_appointments_client_id'), 'appointments', ['client_id'], unique=False)
    op.create_index(op.f('ix_appointments_legal_case_id'), 'appointments', ['legal_case_id'], unique=False)
    op.create_index(op.f('ix_appointments_scheduled_date'), 'appointments', ['scheduled_date'], unique=False)
    
    # Create case_documents table
    op.create_table('case_documents',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('legal_case_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('document_type', sa.String(length=50), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('is_confidential', sa.Boolean(), nullable=False),
    sa.Column('uploaded_by', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['legal_case_id'], ['legal_cases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_documents_legal_case_id'), 'case_documents', ['legal_case_id'], unique=False)
    
    # Create case_activities table
    op.create_table('case_activities',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('legal_case_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('activity_type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('billable', sa.Boolean(), nullable=False),
    sa.Column('billable_amount', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('performed_by', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('activity_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['legal_case_id'], ['legal_cases.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_case_activities_activity_type'), 'case_activities', ['activity_type'], unique=False)
    op.create_index(op.f('ix_case_activities_legal_case_id'), 'case_activities', ['legal_case_id'], unique=False)
    
    # Create whatsapp_sessions table
    op.create_table('whatsapp_sessions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('client_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('current_step', sa.String(length=50), nullable=True),
    sa.Column('collected_data', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_whatsapp_sessions_client_id'), 'whatsapp_sessions', ['client_id'], unique=False)
    op.create_index(op.f('ix_whatsapp_sessions_phone_number'), 'whatsapp_sessions', ['phone_number'], unique=False)
    
    # Create conversation_states table
    op.create_table('conversation_states',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('client_type', sa.String(length=20), nullable=True),
    sa.Column('practice_area', sa.String(length=100), nullable=True),
    sa.Column('scheduling_preference', sa.String(length=20), nullable=True),
    sa.Column('wants_scheduling', sa.Boolean(), nullable=True),
    sa.Column('custom_requests', sa.JSON(), nullable=True),
    sa.Column('flow_completed', sa.Boolean(), nullable=False),
    sa.Column('handoff_triggered', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['whatsapp_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    
    # Create message_history table
    op.create_table('message_history',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('direction', sa.String(length=10), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('message_type', sa.String(length=20), nullable=True),
    sa.Column('whatsapp_message_id', sa.String(length=100), nullable=True),
    sa.Column('message_metadata', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['whatsapp_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_message_history_session_id'), 'message_history', ['session_id'], unique=False)
    op.create_index(op.f('ix_message_history_timestamp'), 'message_history', ['timestamp'], unique=False)
    
    # Create analytics_events table
    op.create_table('analytics_events',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('step_id', sa.String(length=50), nullable=True),
    sa.Column('event_data', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['whatsapp_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_analytics_events_event_type'), 'analytics_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_analytics_events_session_id'), 'analytics_events', ['session_id'], unique=False)
    op.create_index(op.f('ix_analytics_events_timestamp'), 'analytics_events', ['timestamp'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('analytics_events')
    op.drop_table('message_history')
    op.drop_table('conversation_states')
    op.drop_table('whatsapp_sessions')
    op.drop_table('case_activities')
    op.drop_table('case_documents')
    op.drop_table('appointments')
    op.drop_table('legal_cases')
    op.drop_table('client_contacts')
    op.drop_table('clients')
    op.drop_table('user_sessions')
    op.drop_table('users')
    # ### end Alembic commands ###